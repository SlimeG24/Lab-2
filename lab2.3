@file:JvmName("JDoodle")
import java.io.File
import kotlin.math.abs

val numerators = mapOf(
    1 to "одна", 2 to "дві", 3 to "три", 4 to "чотири", 5 to "п'ять", 6 to "шість", 7 to "сім",
    8 to "вісім", 9 to "дев'ять", 10 to "десять", 11 to "одинадцять", 12 to "дванадцять",
    13 to "тринадцять", 14 to "чотирнадцять", 15 to "п'ятнадцять", 16 to "шістнадцять",
    17 to "сімнадцять", 18 to "вісімнадцять", 19 to "дев'ятнадцять", 20 to "двадцять"
)

val denominatorNames = mapOf(
    2 to "других", 3 to "третіх", 4 to "четвертих", 5 to "п'ятих", 6 to "шостих", 7 to "сьомих",
    8 to "восьмих", 9 to "дев'ятих", 10 to "десятих", 11 to "одинадцятих", 12 to "дванадцятих",
    13 to "тринадцятих", 14 to "чотирнадцятих", 15 to "п'ятнадцятих", 16 to "шістнадцятих",
    17 to "сімнадцятих", 18 to "вісімнадцятих", 19 to "дев'ятнадцятих", 20 to "двадцятих"
)

data class Fraction(val numerator: Int, val denominator: Int) {
    operator fun plus(other: Fraction): Fraction {
        val commonDenominator = this.denominator * other.denominator
        val newNumerator = this.numerator * other.denominator + other.numerator * this.denominator
        return Fraction(newNumerator, commonDenominator).simplify()
    }

    operator fun minus(other: Fraction): Fraction {
        val commonDenominator = this.denominator * other.denominator
        val newNumerator = this.numerator * other.denominator - other.numerator * this.denominator
        return Fraction(newNumerator, commonDenominator).simplify()
    }

    operator fun times(other: Fraction): Fraction {
        val newNumerator = this.numerator * other.numerator
        val newDenominator = this.denominator * other.denominator
        return Fraction(newNumerator, newDenominator).simplify()
    }

    operator fun div(other: Fraction): Fraction {
        val newNumerator = this.numerator * other.denominator
        val newDenominator = this.denominator * other.numerator
        return Fraction(newNumerator, newDenominator).simplify()
    }

    fun simplify(): Fraction {
        val gcd = gcd(abs(numerator), abs(denominator))
        return Fraction(numerator / gcd, denominator / gcd)
    }

    private fun gcd(a: Int, b: Int): Int {
        return if (b == 0) a else gcd(b, a % b)
    }
}

fun fractionToWords(frac: Fraction): String {
    val num = frac.numerator
    val den = frac.denominator

    val numWord = numerators[num] ?: return "$num на $den"
    val denWord = denominatorNames[den] ?: return "$num на $den"

    return "$numWord $denWord"
}

fun calculateAndFormat(expression: String): String {
    val parts = expression.split(" ")
    val fraction1 = parts[0].split("/").let { Fraction(it[0].toInt(), it[1].toInt()) }
    val operation = parts[1]
    val fraction2 = parts[2].split("/").let { Fraction(it[0].toInt(), it[1].toInt()) }

    val result = when (operation) {
        "+" -> fraction1 + fraction2
        "-" -> fraction1 - fraction2
        "*" -> fraction1 * fraction2
        ":" -> fraction1 / fraction2
        else -> throw IllegalArgumentException("Невідома операція")
    }

    return fractionToWords(result)
}

// Приклад використання
fun main() {
    val filePath = "/uploads/2.3.txt"  // Вкажіть правильний шлях до файлу
    val expressions = File(filePath).readLines()
    for (expression in expressions) {
        println(calculateAndFormat(expression))
    }
}
